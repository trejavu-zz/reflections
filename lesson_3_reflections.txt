When would you want to create a remote repository rather than keeping all your work local?

When you want to work with others on a given project, you would want a way for them to store what they've been doing in a centralized
location that is accessible by everyone.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

If it were to update automatically, it might not pick up the most recent versions of the files that you would need.
If others are still working on their portions of the project but haven't pushed back to the remote, your files will be stale.
Pulling manually gives you the power to determine when the best time would be to update your files.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
Forks=clones in GitHub
Clones=Copies of files and commit history from either local to local or GitHub to local
Branches=not copies at all. they are extensions of projects in a new direction.

Use forks in GitHub when making a copy of someone else's repository to explore under your own account (e.g. if they don't want edits to their repository)
Use clones typically to pull projects to your local filesystem to work on them locally.
Use branches when you are making experimental changes that you don't necessarily want to include in the master branch quite yet.



What is the benefit of having a copy of the last known state of the remote stored locally?
You can use this image to compare with the current remote to see what changes other had made to the repository.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
I would collaborate using email and naming the versions different things.
The only thing that would be easier is that I wouldn't have to learn git and neither would my collaborative partners.
It would generally be a pain in the ass not to use it though.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
You would want to make changes in a separate branch whenever you need someone else to review it before you add it.
If you're working by yourself, then you would want to work in a separate branch whenever you are trying something that you might want to include in your master branch later but aren't quite sure yet.

Working in the master branch alone makes interacting with your changes easier since they are all there. The problem with that is that it makes it difficult to track the major courses that the project has taken.
It's also more difficult to collaborate with others if you just work in the master branch because the changes that each person brings to the program won't be compartmentalized as well.